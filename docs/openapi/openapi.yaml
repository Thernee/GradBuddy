openapi: 3.0.3
info:/home/thernee/Documents/ALX/projects/backend/gradBuddy/redocly-doc/redocly.yaml
  title: Gradbuddy backend API
  version: 1.0.0
  description: Access Gradbuddy users, scholarships, schools and other resources via API
  contact:
    name: Sani Abubakar Adam
    url: https://github.com/thernee
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0

servers:
  - url: http://localhost:3000
    description: Development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Bearer Authentication using JWT

paths:
  /users:
    get:
      summary: Get all users
      description: Fetch all user data from the database
      responses:
        200:
          description: OK
          content:
            application/json:
              example:
                - user_id: 123e4567-e89b-12d3-a456-426655441234
                  fullname: Sani Abubakar Adam
                  email: saniadam@me.com
                  username: saniadam
                  hashed_password: $2b$10$DqzQqQpXsZ7NqVQXcVH0G.0DxJ2EwvX4jXZqz6n5h9v0u2W9si
                  nationality: Nigerian
                
                - user_id: 123e4567-e89b-12d3-a456-t7e89b12d3a456
                  fullname: Magaret Mary
                  email: magaret@me.com
                  username: magaret
                  hashed_password: $2b$10$DqzQqQpXsZ7NqVQXcVH0G-0yerdcvX4jXZqz6n5h9v6hdhdu2gr
                  nationality: Angola
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{id}:
    get:
      summary: Get user by id
      description: Fetch a registered user data from the database
      responses:
        200:
          description: OK
          content:
            application/json:
              example:
                user_id: 123e4567-e89b-12d3-a456-426655441234
                fullname: Sani Abubakar Adam
                email: saniadam@me.com
                username: saniadam
                hashed_password: $2b$10$DqzQqQpXsZ7NqVQXcVH0G.0DxJ2EwvX4jXZqz6n5h9v0u2W9si
                nationality: Nigeria

        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      summary: Update user
      description: Update a registered user data in the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullname:
                  type: string
                email:
                  type: string
                username:
                  type: string
                hashed_password:
                  type: string
                nationality:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              example:
                success: true
                message: User profile updated successfully
        404:
          description: Not Found
          content:
            application/json:
              success: false
              message: User not found

    delete:
      summary: Delete user
      description: Delete a registered user data from the database
      responses:
        200:
          description: OK
          content:
            application/json:
              example:
                success: true
                message: User deleted successfully
        404:
          description: Not Found
          content:
            application/json:
              success: false
              message: User not found
  
  /users/updatePassword/{id}:
    put:
      summary: Update user password
      description: Update a registered user password in the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                hashed_password:
                  type: string
                confirm_password:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              example:
                success: true
                message: User password updated successfully
        404:
          description: Not Found
          content:
            application/json:
              success: false
              message: User not found

  /register:
    post:
      summary: Register user
      description: Register a new user in the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fullname:
                  type: string
                email:
                  type: string
                username:
                  type: string
                hashed_password:
                  type: string
                nationality:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              example:
                success: true
                message: User registered successfully
        409:
          description: Conflict
          content:
            application/json:
              success: false
              message: User already exists
        400:
          description: Bad Request
          content:
            application/json:
              success: false
              message: Invalid request payload

  /login:
    post:
      summary: Login user
      description: Login a registered user in the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                hashed_password:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              example:
                success: true
                message: User logged in successfully
        404:
          description: Not Found
          content:
            application/json:
              success: false
              message: User not found
        401:
          description: Unauthorized
          content:
            application/json:
              success: false
              message: Invalid username or password

  /logout:
    post:
      summary: Logout user
      description: Logout a registered user in the database
      responses:
        200:
          description: OK
          content:
            application/json:
              example:
                success: true
                message: User logged out successfully
        404:
          description: Not Found
          content:
            application/json:
              success: false
              message: User not found
  
  /schools:
    get:
      summary: Get all schools
      description: Fetch all school data from the database
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    school_id:
                      type: integer
                    school_name:
                      type: string
                    state:
                      type: string
                    city:
                      type: string
                    institutionalControl:
                      type: string
                    rank:
                      type: integer
                    acceptanceRate:
                      type: number
                    schoolWebsite:
                      type: string

              example:
                - school_id: 23
                  school_name: Albert Einstein School
                  state: Lagos
                  city: Ikeja
                  institutionalControl: Private
                  rank: 354
                  acceptanceRate: 45.7
                  schoolWebsite: https://www.albeinstein.com

                - school_id: 24
                  school_name: Charles Darwin School
                  state: Abuja
                  city: Abuja
                  institutionalControl: Public
                  rank: 354
                  acceptanceRate: 45.7
                  schoolWebsite: https://www.charlesdarwin.com

        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /schools/{id}:
    get:
      summary: Get school by id
      description: Fetch a school data from the database
      responses:
        200:
          description: OK
          content:
            application/json:
              example:
                school_id: 23
                school_name: Albert Einstein School
                state: Lagos
                city: Ikeja
                institutionalControl: Private
                rank: 354
                acceptanceRate: 45.7
                schoolWebsite: https://www.albeinstein.com

        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    patch:
      summary: Update school
      description: Update a school data in the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                school_name:
                  type: string
                state:
                  type: string
                city:
                  type: string
                institutionalControl:
                  type: string
                rank:
                  type: integer
                acceptanceRate:
                  type: number
                schoolWebsite:
                  type: string

      responses:
        200:
          description: OK
          content:
            application/json:
              example:
                success: true
                message: School updated successfully
        404:
          description: Not Found
          content:
            application/json:
              success: false
              message: School not found

    delete:
      summary: Delete school
      description: Delete a school data in the database
      responses:
        200:
          description: OK
          content:
            application/json:
              example:
                success: true
                message: School deleted successfully
        404:
          description: Not Found
          content:
            application/json:
              success: false
              message: School not found
    
    post:
      summary: Create school
      description: Create a new school in the database
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                school_name:
                  type: string
                state:
                  type: string
                city:
                  type: string
                institutionalControl:
                  type: string
                rank:
                  type: integer
                acceptanceRate:
                  type: number
                schoolWebsite:
                  type: string

      responses:
        200:
          description: OK
          content:
            application/json:
              example:
                success: true
                message: School created successfully
        400:
          description: Bad Request
          content:
            application/json:
              success: false
              message: School already exists
        
    /criteria/{school_id}:
      get:
        summary: Get criteria by school id
        description: Fetch criteria data from the database
        responses:
          200:
            description: OK
            content:
              application/json:
                schema:
                  type: array
                  items:
                    type: object
                    properties:
                      criteria_id:
                        type: integer
                      school_id:
                        type: integer
                      graduateLevel:
                        type: string
                     offersScholarship:
                        type: boolean
                     requiresAppFee:
                        type: boolean
                     requiresGre:
                        type: boolean

                example:
                  - criteria_id: 12
                    school_id: 23
                    graduateLevel: Masters
                    offersScholarship: true
                    requiresAppFee: true
                    requiresGre: true

          404:
            description: Not Found
            content:
              application/json:
                success: false
                message: Criteria not found for given school id
    
      post:
        summary: Create criteria
        description: Create a new criteria for a school in the database
        requestBody:
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  school_id:
                    type: integer
                  graduateLevel:
                    type: string
                  offersScholarship:
                    type: boolean
                  requiresAppFee:
                    type: boolean
                  requiresGre:
                    type: boolean

        responses:
          200:
            description: OK
            content:
              application/json:
                example:
                  success: true
                  message: Criteria created successfully
          400:
            description: Bad Request
            content:
              application/json:
                success: false
                message: Criteria already exists